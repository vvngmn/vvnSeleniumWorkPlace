Help on WebDriver in module selenium.webdriver.chrome.webdriver object:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls the ChromeDriver and allows you to drive the browser.
 |  
 |  You will need to download the ChromeDriver executable from
 |  http://chromedriver.storage.googleapis.com/index.html
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      __builtin__.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, executable_path='chromedriver', port=0, chrome_options=None, service_args=None, desired_capabilities=None, service_log_path=None)
 |      Creates a new instance of the chrome driver.
 |      
 |      Starts the service and then creates new instance of chrome driver.
 |      
 |      :Args:
 |       - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH
 |       - port - port you would like the service to run, if left as 0, a free port will be found.
 |       - desired_capabilities: Dictionary object with non-browser specific
 |         capabilities only, such as "proxy" or "loggingPref".
 |       - chrome_options: this takes an instance of ChromeOptions
 |  
 |  quit(self)
 |      Closes the browser and shuts down the ChromeDriver executable
 |      that is started when starting the ChromeDriver
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified element_id.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_async_script('document.title')
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('document.title')
 |  
 |  find_element(self, by='id', value=None)
 |      'Private' method used by the find_element_by_* methods.
 |      
 |      :Usage:
 |          Use the corresponding find_element_by_* instead of this.
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Usage:
 |          driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector: The css selector to use when finding elements.
 |      
 |      :Usage:
 |          driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Usage:
 |          driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Usage:
 |          driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Usage:
 |          driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Usage:
 |          driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name: The tag name of the element to find.
 |      
 |      :Usage:
 |          driver.find_element_by_tag_name('foo')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Usage:
 |          driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      'Private' method used by the find_elements_by_* methods.
 |      
 |      :Usage:
 |          Use the corresponding find_elements_by_* instead of this.
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Usage:
 |          driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector: The css selector to use when finding elements.
 |      
 |      :Usage:
 |          driver.find_element_by_css_selector('#foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Usage:
 |          driver.find_element_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Usage:
 |          driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Usage:
 |          driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Usage:
 |          driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name: The tag name the use when finding elements.
 |      
 |      :Usage:
 |          driver.find_elements_by_tag_name('foo')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Usage:
 |          driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Gets the screenshot of the current window. Returns False if there is
 |         any IOError, else returns True. Use full paths in your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  is_online(self)
 |      Returns a boolean if the browser is online or offline
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot = get_screenshot_as_file(self, filename)
 |      Gets the screenshot of the current window. Returns False if there is
 |         any IOError, else returns True. Use full paths in your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, desired_capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Returns the element with focus, or BODY if nothing has focus.
 |      
 |      :Usage:
 |          driver.switch_to_active_element()
 |  
 |  switch_to_alert(self)
 |      Switches focus to an alert on the page.
 |      
 |      :Usage:
 |          driver.switch_to_alert()
 |  
 |  switch_to_default_content(self)
 |      Switch focus to the default frame.
 |      
 |      :Usage:
 |          driver.switch_to_default_content()
 |  
 |  switch_to_frame(self, frame_reference)
 |      Switches focus to the specified frame, by index, name, or webelement.
 |      
 |      :Args:
 |       - frame_reference: The name of the window to switch to, an integer representing the index,
 |                          or a webelement that is an (i)frame to switch to.
 |      
 |      :Usage:
 |          driver.switch_to_frame('frame_name')
 |          driver.switch_to_frame(1)
 |          driver.switch_to_frame(driver.find_elements_by_tag_name("iframe")[0])
 |  
 |  switch_to_window(self, window_name)
 |      Switches focus to the specified window.
 |      
 |      :Args:
 |       - window_name: The name or window handle of the window to switch to.
 |      
 |      :Usage:
 |          driver.switch_to_window('main')
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |       - driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles
